/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnauthenticatedRouteImport } from './routes/_unauthenticated'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as UnauthenticatedIndexRouteImport } from './routes/_unauthenticated/index'
import { Route as UnauthenticatedGetStartedIndexRouteImport } from './routes/_unauthenticated/get-started/index'
import { Route as AuthenticatedSignOutIndexRouteImport } from './routes/_authenticated/sign-out/index'
import { Route as AuthenticatedAppIndexRouteImport } from './routes/_authenticated/app/index'
import { Route as ApiRpcSplatRouteImport } from './routes/api/rpc/$'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'
import { Route as AdminWorkerSplatRouteImport } from './routes/admin/worker/$'

const UnauthenticatedRoute = UnauthenticatedRouteImport.update({
  id: '/_unauthenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const UnauthenticatedIndexRoute = UnauthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UnauthenticatedRoute,
} as any)
const UnauthenticatedGetStartedIndexRoute =
  UnauthenticatedGetStartedIndexRouteImport.update({
    id: '/get-started/',
    path: '/get-started/',
    getParentRoute: () => UnauthenticatedRoute,
  } as any)
const AuthenticatedSignOutIndexRoute =
  AuthenticatedSignOutIndexRouteImport.update({
    id: '/sign-out/',
    path: '/sign-out/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedAppIndexRoute = AuthenticatedAppIndexRouteImport.update({
  id: '/app/',
  path: '/app/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const ApiRpcSplatRoute = ApiRpcSplatRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminWorkerSplatRoute = AdminWorkerSplatRouteImport.update({
  id: '/admin/worker/$',
  path: '/admin/worker/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof UnauthenticatedIndexRoute
  '/admin/worker/$': typeof AdminWorkerSplatRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
  '/app': typeof AuthenticatedAppIndexRoute
  '/sign-out': typeof AuthenticatedSignOutIndexRoute
  '/get-started': typeof UnauthenticatedGetStartedIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof UnauthenticatedIndexRoute
  '/admin/worker/$': typeof AdminWorkerSplatRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
  '/app': typeof AuthenticatedAppIndexRoute
  '/sign-out': typeof AuthenticatedSignOutIndexRoute
  '/get-started': typeof UnauthenticatedGetStartedIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_unauthenticated': typeof UnauthenticatedRouteWithChildren
  '/_unauthenticated/': typeof UnauthenticatedIndexRoute
  '/admin/worker/$': typeof AdminWorkerSplatRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
  '/_authenticated/app/': typeof AuthenticatedAppIndexRoute
  '/_authenticated/sign-out/': typeof AuthenticatedSignOutIndexRoute
  '/_unauthenticated/get-started/': typeof UnauthenticatedGetStartedIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin/worker/$'
    | '/api/auth/$'
    | '/api/rpc/$'
    | '/app'
    | '/sign-out'
    | '/get-started'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin/worker/$'
    | '/api/auth/$'
    | '/api/rpc/$'
    | '/app'
    | '/sign-out'
    | '/get-started'
  id:
    | '__root__'
    | '/_authenticated'
    | '/_unauthenticated'
    | '/_unauthenticated/'
    | '/admin/worker/$'
    | '/api/auth/$'
    | '/api/rpc/$'
    | '/_authenticated/app/'
    | '/_authenticated/sign-out/'
    | '/_unauthenticated/get-started/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  UnauthenticatedRoute: typeof UnauthenticatedRouteWithChildren
  AdminWorkerSplatRoute: typeof AdminWorkerSplatRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  ApiRpcSplatRoute: typeof ApiRpcSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_unauthenticated': {
      id: '/_unauthenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UnauthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_unauthenticated/': {
      id: '/_unauthenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof UnauthenticatedIndexRouteImport
      parentRoute: typeof UnauthenticatedRoute
    }
    '/_unauthenticated/get-started/': {
      id: '/_unauthenticated/get-started/'
      path: '/get-started'
      fullPath: '/get-started'
      preLoaderRoute: typeof UnauthenticatedGetStartedIndexRouteImport
      parentRoute: typeof UnauthenticatedRoute
    }
    '/_authenticated/sign-out/': {
      id: '/_authenticated/sign-out/'
      path: '/sign-out'
      fullPath: '/sign-out'
      preLoaderRoute: typeof AuthenticatedSignOutIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/app/': {
      id: '/_authenticated/app/'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AuthenticatedAppIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/worker/$': {
      id: '/admin/worker/$'
      path: '/admin/worker/$'
      fullPath: '/admin/worker/$'
      preLoaderRoute: typeof AdminWorkerSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedAppIndexRoute: typeof AuthenticatedAppIndexRoute
  AuthenticatedSignOutIndexRoute: typeof AuthenticatedSignOutIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedAppIndexRoute: AuthenticatedAppIndexRoute,
  AuthenticatedSignOutIndexRoute: AuthenticatedSignOutIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface UnauthenticatedRouteChildren {
  UnauthenticatedIndexRoute: typeof UnauthenticatedIndexRoute
  UnauthenticatedGetStartedIndexRoute: typeof UnauthenticatedGetStartedIndexRoute
}

const UnauthenticatedRouteChildren: UnauthenticatedRouteChildren = {
  UnauthenticatedIndexRoute: UnauthenticatedIndexRoute,
  UnauthenticatedGetStartedIndexRoute: UnauthenticatedGetStartedIndexRoute,
}

const UnauthenticatedRouteWithChildren = UnauthenticatedRoute._addFileChildren(
  UnauthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  UnauthenticatedRoute: UnauthenticatedRouteWithChildren,
  AdminWorkerSplatRoute: AdminWorkerSplatRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  ApiRpcSplatRoute: ApiRpcSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.ts'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
